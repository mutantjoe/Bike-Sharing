# -*- coding: utf-8 -*-
"""Dashboard

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zRlbddho9QHLLmxk1Xj1Owrh06BjYMA_
"""



pip install streamlit

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
sns.set(style='dark')

#Initializing the daily bike sharing report and visualizing the first five rows of the data
day_df = pd.read_csv("https://raw.githubusercontent.com/mutantjoe/Bike-Sharing/main/Data/day.csv")
day_df.head()

#Intiaizing the hourly bike sharing report and visualizing the first five rows of the data
hour_df = pd.read_csv("https://raw.githubusercontent.com/mutantjoe/Bike-Sharing/main/Data/hour.csv")
hour_df.head()

#Renaming the daily bike sharing data
day_df.rename(columns={
    'dteday': 'dateday',
    'yr': 'year',
    'mnth': 'months',
    'weathersit': 'weather_situation',
    'temp': 'temperature',
    'atemp': 'air_temperature',
    'hum': 'humidity',
    'cnt': 'counts'
}, inplace=True)

day_df.head()

#Renaming the hourly bike sharing data
hour_df.rename(columns={
    'dteday': 'dateday',
    'yr': 'year',
    'mnth': 'months',
    'hr': 'hours',
    'weathersit': 'weather_situation',
    'temp': 'temperature',
    'atemp': 'air_temperature',
    'hum': 'humidity',
    'cnt': 'counts'
}, inplace=True)

hour_df.head()

#Turning numerical values in the daily bike sharing report into explanations

day_df['season'] = day_df['season'].map({
    1: 'Spring', 2: 'Summer', 3: 'Fall', 4: 'Winter'
})
day_df['months'] = day_df['months'].map({
    1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June',
    7: 'July', 8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'
})
day_df['weekday'] = day_df['weekday'].map({
    0: 'Sunday', 1: 'Monday', 2: 'Tuesday', 3: 'Wednesday', 4: 'Thursday', 5: 'Friday', 6: 'Saturday'
})
day_df['workingday'] = day_df['workingday'].map({
    0: 'Off-Day', 1: 'Working Day'
})
day_df['weather_situation'] = day_df['weather_situation'].map({
    1: 'Clear/Partly Cloudy',
    2: 'Misty/Cloudy',
    3: 'Light Snow/Rain',
    4: 'Severe Weather'
})

#Turning numerical values in the hourly bike sharing report into explanations

hour_df['season'] = hour_df['season'].map({
    1: 'Spring', 2: 'Summer', 3: 'Fall', 4: 'Winter'
})
hour_df['months'] = hour_df['months'].map({
    1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June',
    7: 'July', 8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'
})
hour_df['weekday'] = hour_df['weekday'].map({
    0: 'Sunday', 1: 'Monday', 2: 'Tuesday', 3: 'Wednesday', 4: 'Thursday', 5: 'Friday', 6: 'Saturday'
})
hour_df['workingday'] = hour_df['workingday'].map({
    0: 'Off-Day', 1: 'Working Day'
})
hour_df['weather_situation'] = hour_df['weather_situation'].map({
    1: 'Clear/Partly Cloudy',
    2: 'Misty/Cloudy',
    3: 'Light Snow/Rain',
    4: 'Severe Weather'
})

#Initializing functions for each columns
#Initializing the season function

#initialize the daily range function
def create_daily_rent_df(df):
    daily_rent_df = df.groupby(by='dateday').agg({
        'counts': 'sum'
    }).reset_index()
    return daily_rent_df

#Initialize the daily casual rent function
def create_daily_casual_rent_df(df):
    daily_casual_rent_df = df.groupby(by='dateday').agg({
        'casual': 'sum'
    }).reset_index()
    return daily_casual_rent_df

#Initialize the daily registered rent function
def create_daily_registered_rent_df(df):
    daily_registered_rent_df = df.groupby(by='dateday').agg({
        'registered': 'sum'
    }).reset_index()
    return daily_registered_rent_df

#Initialize the season rent function
def create_season_rent_df(df):
    season_rent_df = df.groupby(by='season')[['registered', 'casual']].sum().reset_index()
    return season_rent_df

#Initialize the monthly rent function
def create_monthly_rent_df(df):
    monthly_rent_df = df.groupby(by='months').agg({
        'counts': 'sum'
    })
    ordered_months = [
        'January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'
    ]
    monthly_rent_df = monthly_rent_df.reindex(ordered_months, fill_value=0)
    return monthly_rent_df

#Initialize the weekday rent function
def create_weekday_rent_df(df):
    weekday_rent_df = df.groupby(by='weekday').agg({
        'counts': 'sum'
    }).reset_index()
    return weekday_rent_df

# Initialize the working day function
def create_workingday_rent_df(df):
    workingday_rent_df = df.groupby(by='workingday').agg({
        'counts': 'sum'
    }).reset_index()
    return workingday_rent_df

# Initialize the holiday rent function
def create_holiday_rent_df(df):
    holiday_rent_df = df.groupby(by='holiday').agg({
        'counts': 'sum'
    }).reset_index()
    return holiday_rent_df

# Initialize the weather rent function
def create_weather_rent_df(df):
    weather_rent_df = df.groupby(by='weather_situation').agg({
        'counts': 'sum'
    })
    return weather_rent_df

#Initializing the date limiter function
min_date = pd.to_datetime(day_df['dateday']).dt.date.min()
max_date = pd.to_datetime(day_df['dateday']).dt.date.max()

with st.sidebar:
    # Mengambil start_date & end_date dari date_input
    start_date, end_date = st.date_input(
        label='Dates',
        min_value= min_date,
        max_value= max_date,
        value=[min_date, max_date]
    )

main_df = day_df[(day_df['dateday'] >= str(start_date)) &
                (day_df['dateday'] <= str(end_date))]

#Initializing the data frames
# Menyiapkan berbagai dataframe
daily_rent_df = create_daily_rent_df(main_df)
daily_casual_rent_df = create_daily_casual_rent_df(main_df)
daily_registered_rent_df = create_daily_registered_rent_df(main_df)
season_rent_df = create_season_rent_df(main_df)
monthly_rent_df = create_monthly_rent_df(main_df)
weekday_rent_df = create_weekday_rent_df(main_df)
workingday_rent_df = create_workingday_rent_df(main_df)
holiday_rent_df = create_holiday_rent_df(main_df)
weather_rent_df = create_weather_rent_df(main_df)

#Initializing the dashboard
st.header('Bike Sharing Data')

#Function to visualize the first question

def plot_hours_sharing():
  hour_df.groupby('hours')['counts'].mean().reset_index()

  hour_counts_df = hour_df.groupby('hours')['counts'].mean().reset_index()

  # Set the style for the plot
  sns.set(style="whitegrid")

  # Create a bar plot
  plt.figure(figsize=(12, 6))
  bar_plot = sns.barplot(x='hours', y='counts', data=hour_counts_df, palette="viridis")

  # Customize the plot
  plt.title('Hourly Bike Rentals')
  plt.xlabel('Hour of the Day')
  plt.ylabel('Average Bike Rentals')
  plt.xticks(rotation=45)

  # Visualize the plot
  st.pyplot(plt)

#Function to visualize the second question

def plot_weather_rent():
  # Select columns for analysis
  weather_situation_analysis_day = day_df.iloc[:, [8, 13, 14, 15]]

  # Group by 'weather_situation' and sum the relevant columns
  weather_situation_sum = weather_situation_analysis_day.groupby('weather_situation').mean()

  # Reset the index to make 'weather_situation' a regular column
  weather_situation_sum = weather_situation_sum.reset_index()

  # Set the style for the plot
  sns.set(style="whitegrid")

  # Create a bar plot for each weather situation
  plt.figure(figsize=(12, 8))
  bar_plot = sns.barplot(x='weather_situation', y='counts', data=weather_situation_sum, palette="viridis")

  # Customize the plot
  plt.title('Weather Situation Analysis')
  plt.xlabel('Weather Situation')
  plt.ylabel('Average Counts')
  plt.xticks(rotation=45)

  # Display the plot
  plt.show()

#Function to visualize the third question

def scatter_humid_rent():
  # Specify the two variables of interest
  variable1 = 'humidity'
  variable2 = 'counts'

  # Set the style for the plot
  sns.set(style="whitegrid")

  # Create a scatter plot with regression line
  plt.figure(figsize=(10, 6))
  scatter_plot = sns.regplot(x=variable1, y=variable2, data=day_df, scatter_kws={'s': 30}, line_kws={'color': 'red'})

  # Customize the plot
  plt.title(f'Scatter Plot with Regression Line\n{variable1} vs. {variable2}')
  plt.xlabel(variable1)
  plt.ylabel(variable2)

  # Display the plot
  st.pyplot(plt)

#Summoning the function for each visualization

st.subheader('Average Bike Shared by Hours')
plot_hours_sharing()

st.subheader('Average Bike Shared by Weather Situations')
plot_weather_rent()

st.subheader('Humidity Regression Line')
scatter_humid_rent()

st.caption('Copyright (c) Jonathan Ardi Putranto')