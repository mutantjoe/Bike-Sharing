# -*- coding: utf-8 -*-
"""Proyek_Analisis_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VyFS_ymvUF4qOXUL3J_5bDs_5h_tnxZ5

# Proyek Analisis Data: Bike Sharing Dataset
- **Nama:** Jonathan Ardi Putranto
- **Email:** jonathan.ardiputranto@gmail.com
- **ID Dicoding:** ardidiot184

## Menentukan Pertanyaan Bisnis

- Pertanyaan 1 : In which part of the day bike sharing is at the highest?
- Pertanyaan 2 : In which weather situation bike rentals are at its peak?
- Pertanyaan 3 : How does humidity affect the number of bike rentals?

## Import Semua Packages/Library yang Digunakan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data
"""

#Initializing the daily bike sharing report and visualizing the first five rows of the data
day_df = pd.read_csv("https://raw.githubusercontent.com/mutantjoe/Bike-Sharing/main/Data/day.csv")
day_df.head()

#Intiaizing the hourly bike sharing report and visualizing the first five rows of the data
hour_df = pd.read_csv("https://raw.githubusercontent.com/mutantjoe/Bike-Sharing/main/Data/hour.csv")
hour_df.head()

"""### Assessing Data

Assessing the **daily bike sharing** data
"""

#Visualizing the information about daiiy bike sharing data, including details on its structure, data types, and memory usage.
day_df.info()

"""There is a data mistype in the dteday column, which ought to be expressed as a datetime data type."""

#Describing the descriptive statistics of the daily bike sharing data
day_df.describe()

"""The visualization above implies that the data contains no statistical anomalies"""

#This code calculates and displays the sum of missing values for each column in the daily bike sharing data
day_df.isna().sum()

"""The results below shows that the data contains no missing value"""

#This code calculates and displays the sum of duplicated values for each column in the data
day_df.isna().sum()

print("The amount of duplicated data: ", day_df.duplicated().sum())

"""The calculations above suggests that there is no duplicated data

Assessing the **hourly bike sharing** data
"""

#Visualizing the information about hourly bike sharing data, including details on its structure, data types, and memory usage.
hour_df.info()

"""The data flaw echoes that of the daily bike sharing data, with the dteday expressed as an object data type"""

#Describing the descriptive statistics of the hourly bike sharing data
hour_df.describe()

"""The visualization above implies that the data contains no statistical anomalies"""

#This code calculates and displays the sum of duplicated values for each column in the data
hour_df.isna().sum()

"""The results suggest that the data contains no missing value"""

#This code calculates and displays the sum of duplicated values for each column in the data
hour_df.isna().sum()

"""The results suggests that the data contains no duplicated data

### Cleaning Data

Renaming the data variables to ensure more comfortable visualization and ease in interpretation
"""

#Renaming the daily bike sharing data
day_df.rename(columns={
    'dteday': 'dateday',
    'yr': 'year',
    'mnth': 'months',
    'weathersit': 'weather_situation',
    'temp': 'temperature',
    'atemp': 'air_temperature',
    'hum': 'humidity',
    'cnt': 'counts'
}, inplace=True)

day_df.head()

#Renaming the hourly bike sharing data
hour_df.rename(columns={
    'dteday': 'dateday',
    'yr': 'year',
    'mnth': 'months',
    'hr': 'hours',
    'weathersit': 'weather_situation',
    'temp': 'temperature',
    'atemp': 'air_temperature',
    'hum': 'humidity',
    'cnt': 'counts'
}, inplace=True)

hour_df.head()

"""Turning certain values in certain data columns into explanations"""

#Turning numerical values in the daily bike sharing report into explanations

day_df['season'] = day_df['season'].map({
    1: 'Spring', 2: 'Summer', 3: 'Fall', 4: 'Winter'
})
day_df['months'] = day_df['months'].map({
    1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June',
    7: 'July', 8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'
})
day_df['weekday'] = day_df['weekday'].map({
    0: 'Sunday', 1: 'Monday', 2: 'Tuesday', 3: 'Wednesday', 4: 'Thursday', 5: 'Friday', 6: 'Saturday'
})
day_df['workingday'] = day_df['workingday'].map({
    0: 'Off-Day', 1: 'Working Day'
})
day_df['weather_situation'] = day_df['weather_situation'].map({
    1: 'Clear/Partly Cloudy',
    2: 'Misty/Cloudy',
    3: 'Light Snow/Rain',
    4: 'Severe Weather'
})

"""We'll notice that the data express a missing value because we haven't transform it into a categorical data"""

#Turning numerical values in the hourly bike sharing report into explanations

hour_df['season'] = hour_df['season'].map({
    1: 'Spring', 2: 'Summer', 3: 'Fall', 4: 'Winter'
})
hour_df['months'] = hour_df['months'].map({
    1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June',
    7: 'July', 8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'
})
hour_df['weekday'] = hour_df['weekday'].map({
    0: 'Sunday', 1: 'Monday', 2: 'Tuesday', 3: 'Wednesday', 4: 'Thursday', 5: 'Friday', 6: 'Saturday'
})
hour_df['workingday'] = hour_df['workingday'].map({
    0: 'Off-Day', 1: 'Working Day'
})
hour_df['weather_situation'] = hour_df['weather_situation'].map({
    1: 'Clear/Partly Cloudy',
    2: 'Misty/Cloudy',
    3: 'Light Snow/Rain',
    4: 'Severe Weather'
})

"""Same problems occurs in the hourly bike sharing report data"""

#Transforming dateday data type to datetime
day_df['dateday'] = pd.to_datetime(day_df.dateday)

#Transforming certain data types to categorical datatype
day_df['season'] = day_df.season.astype('category')
day_df['year'] = day_df.year.astype('category')
day_df['months'] = day_df.months.astype('category')
day_df['holiday'] = day_df.holiday.astype('category')
day_df['weekday'] = day_df.weekday.astype('category')
day_df['workingday'] = day_df.workingday.astype('category')
day_df['weather_situation'] = day_df.weather_situation.astype('category')

day_df.head()

#Transforming dateday data type to datetime
hour_df['dateday'] = pd.to_datetime(hour_df.dateday)

#Transforming certain data types to categorical datatype
hour_df['season'] = hour_df.season.astype('category')
hour_df['year'] = hour_df.year.astype('category')
hour_df['months'] = hour_df.months.astype('category')
hour_df['holiday'] = hour_df.holiday.astype('category')
hour_df['weekday'] = hour_df.weekday.astype('category')
hour_df['workingday'] = hour_df.workingday.astype('category')
hour_df['weather_situation'] = hour_df.weather_situation.astype('category')

day_df.head()

"""## Exploratory Data Analysis (EDA)

### Explore ...

*Question 1. In which part of the day bike sharing is at the highest*
"""

hour_df.groupby('hours')['counts'].sum().reset_index()

"""The data above showcases the sum number of hourly bike sharings

**Question 2. In which weather situation bike rentals are at its peak **
"""

print(pd.unique(day_df['weather_situation']))

weather_situation_analysis_day = day_df.iloc[:, [8, 13, 14, 15]]
weather_situation_analysis_day.groupby('weather_situation').sum()

"""The result above showcases the sum number of bike rentals in each weather conditions

*Question 3. How does humidity affect the number of bike rentals*
"""

# Specify the two variables of interest
variable1 = 'humidity'
variable2 = 'counts'

# Calculate the correlation coefficient between the two variables
correlation_coefficient = day_df[variable1].corr(day_df[variable2])

# Display the correlation coefficient
print(f'Correlation coefficient between {variable1} and {variable2}: {correlation_coefficient:.2f}')

"""The number above highlights the correlation coefficient between humidity and counts

## Visualization & Explanatory Analysis

### Pertanyaan 1:
"""

hour_counts_df = hour_df.groupby('hours')['counts'].sum().reset_index()

# Set the style for the plot
sns.set(style="whitegrid")

# Create a bar plot
plt.figure(figsize=(12, 6))
bar_plot = sns.barplot(x='hours', y='counts', data=hour_counts_df, palette="viridis")

# Customize the plot
plt.title('Hourly Bike Rentals')
plt.xlabel('Hour of the Day')
plt.ylabel('Total Bike Rentals')
plt.xticks(rotation=45)

# Display the plot
plt.show()

"""The bar chart above tells us that bike rentals are at its maximum at the 17th hour, or roughly at 5 p.m

### Pertanyaan 2:
"""

# Print unique values in the 'weather_situation' column
print(pd.unique(day_df['weather_situation']))

# Select columns for analysis
weather_situation_analysis_day = day_df.iloc[:, [8, 13, 14, 15]]

# Group by 'weather_situation' and sum the relevant columns
weather_situation_sum = weather_situation_analysis_day.groupby('weather_situation').sum()

# Reset the index to make 'weather_situation' a regular column
weather_situation_sum = weather_situation_sum.reset_index()

# Set the style for the plot
sns.set(style="whitegrid")

# Create a bar plot for each weather situation
plt.figure(figsize=(12, 8))
bar_plot = sns.barplot(x='weather_situation', y='counts', data=weather_situation_sum, palette="viridis")

# Customize the plot
plt.title('Weather Situation Analysis')
plt.xlabel('Weather Situation')
plt.ylabel('Total Counts')
plt.xticks(rotation=45)

# Display the plot
plt.show()

"""The bar plot above shows that the weather situation with the highest amount of bike rentals are when the weather is clear and partly cloudy

### Pertanyaan 3.
"""

# Set the style for the plot
sns.set(style="whitegrid")

# Create a scatter plot with regression line
plt.figure(figsize=(10, 6))
scatter_plot = sns.regplot(x=variable1, y=variable2, data=day_df, scatter_kws={'s': 30}, line_kws={'color': 'red'})

# Customize the plot
plt.title(f'Scatter Plot with Regression Line\n{variable1} vs. {variable2}')
plt.xlabel(variable1)
plt.ylabel(variable2)

# Display the plot
plt.show()

"""Although the regression line shows a slight downward trend. The scatter plot shows that humidity hardly affects the number of bike rentals

## Conclusion

**First Question Conclusion** : The results above shows that the hour where bike rentals are at its peak is in the 17th hour, or 5 p.m. The bar chart shows sharp trends around 8 a.m and 5 p.m, suggesting that sharp increments in bike rentals are the result of rush hours which occurs around those times.

**Second Question Conclusion** : The bar chart above shows that bike rentals are its highest when the weather is clear or partly cloudy. This number contrast sharply with the number of bike rentals during rainy or snowy weather, suggesting a collective attitude in the associated risk of cycling in turbulent weathers.

**Third Question Conclusion** : The regression line shows a slight downward trend, but the scatter plot implies that humidity plays very little role in determining the fluctuations in the number of bike rentals. This suggests that humidity is not an important factor in bike rentals, and more attention should be wavered to other more important variables.
"""